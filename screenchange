#!/bin/bash
######################################################################
# Made by coding-green
######################################################################

PrintUsage(){
cat << EOI
Usage:
 $0 [OPTIONS] FirstDisplay SecondDisplay

Options
  -m|--mode	  sets the mode (see below)
  -1|--first	  sets the FIRST screen (has priority before input)
  -2|--second     sets the SECOND screen (has priority before input)
  -p|--primary    swaps the primary screen (default is the FIRST)

Modes:
  first[f]        use first screen only
  second[s]       use second screen only
  clone[c]        clone the FIRST screen
  extendl[l]      extends the connected monitor to the left  of the FIRST one
  extendr[r]      extends the connected monitor to the right of the FIRST one
  modes[m]        display all possible screen resolutions of all connected screens

By default the first display is primary, change this with the primary flag

EOI
exit 1
}


################################
# Text color variables
#################################
txtund=$(tput sgr 0 1)           #  Underline
txtbld=$(tput bold)              #  Bold
bldred=${txtbld}$(tput setaf 1)  #  red
bldblu=${txtbld}$(tput setaf 4)  #  blue
bldwht=${txtbld}$(tput setaf 7)  #  white
txtrst=$(tput sgr0)              #  Reset

# Feedback indicators
function notice {
	echo -e ${bldwht}"$1"${txtrst}
}
function pass {
	echo -e ${bldblu}"$1"${txtrst}
}
function error {
	echo -e ${bldred}"$1"${txtrst} >&2
}


#####################################################################
# Read Parameters

# NOTE: This requires GNU getopt.  On Mac OS X, you get BSD getopt by default,
# which doesn't work; see below.
# Put a ':' after options that take a value
PARAM_FIX=`getopt -o vdp1:2:m: --long verbose,debug,primary,first:,second:,mode: \
             -n "$0" -- "$@"`
if [ $? != 0 ] ; then error "Terminating..."  ; PrintUsage ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$PARAM_FIX"


# use 'shift' for pure flags and 'shift 2' for parameters

VERBOSE=false
DEBUG=false
FIRST=
SECOND=
MODE=
PRIMARY=1

while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=true; shift ;;
    -d | --debug ) DEBUG=true; shift ;;
    -p | --primary) PRIMARY=2; shift ;;
    -1 | --first ) FIRST="$2"; shift 2 ;;
    -2 | --second ) SECOND="$2"; shift 2 ;;
    -m | --mode ) MODE="$2"; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

##################################
# Required program(s)
##################################

req_progs=(xrandr  )
for p in ${req_progs[@]}; do
  hash "$p" 2>&- || \
  { 
	error "Required program \"$p\" not installed."; exit 1; }
done

######################################
# Check Parameters
#####################################

if [ "$MODE" != "m" ] && [ "$MODE" != "mode" ]; then
	if [ -z "$FIRST" ]; then
		if [ -n $1 ]; then
			FIRST="$1"
			shift
		else
			error "ERROR: No FIRSTal monitor supplied"
			PrintUsage
		fi
	fi
	if [ -z "$SECOND" ]; then
		if [ -n $1 ]; then
			SECOND="$1"
		else
			error "ERROR: No SECONDal monitor supplied"
			PrintUsage
		fi
	fi
fi


if [ -z "$MODE" ]; then
        error "ERROR: No mode specified"
	PrintUsage
fi


if [ $PRIMARY -eq 2 ]; then
	TT="$FIRST"
	FIRST="$SECOND"
	SECOND="$TT"
	case $MODE in
		extendr|r)
			MODE="l"
		;;
		extendl|l)
			MODE="r"
		;;
	esac
fi

######################################################################
# Main
#####################################################################

case $MODE in
  modes|m)
    xrandr -q
    ;;
  first|f)
    $(xrandr --output "$FIRST" --auto --output "$SECOND" --off)
    printf "$(pass $FIRST)"
    printf  "\t-> on \n"
    printf "$(pass $SECOND)"
    printf  "\t-> off \n"
    ;;
  second|s)
    xrandr --output "$FIRST" --off --output "$SECOND" --auto
    printf "$(pass $FIRST)"
    printf  "\t-> off \n"
    printf "$(pass $SECOND)"
    printf  "\t-> on \n"
    ;;
  clone|c)
    CLONERES=`xrandr --query | awk '/^ *[0-9]*x[0-9]*/{ print $1 }' | sort | uniq -d | head -1`
    xrandr --output "$FIRST" --mode "$CLONERES" --output "$SECOND" --same-as "$FIRST" --mode "$CLONERES"
    echo  "Cloning: "$(pass $FIRST) "=" $(pass $SECOND)    
    ;;
  extendl|l)
    xrandr --output "$SECOND" --auto  --output "$FIRST" --primary --auto --left-of "$SECOND"
    echo ""$(pass $FIRST)* "|" $(pass $SECOND)
    ;;
  extendr|r)
    xrandr --output "$SECOND" --auto --output "$FIRST" --primary --auto --right-of "$SECOND"
    echo ""$(pass $SECOND) "|" $(pass $FIRST)*
    ;;
  *)
    error "No valid mode"
    PrintUsage
    ;;
esac

